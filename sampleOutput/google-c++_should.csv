Section Info,Nearest Subheading,"Sentence with ""should""",Page Number
0.0,};,"If you use template metaprogramming, you should expect to put considerable effort into minimizing and isolating the complexity. You should hide metaprogramming as an implementation detail whenever possible, so that user-facing headers are readable, and you should make sure that tricky code is especially well commented. You should carefully document how the code is used, and you should say something about what the ""generated"" code looks like.",7
0.0,};,"The error messages are part of your user interface, and your code should be tweaked as necessary so that the error messages are understandable and actionable from a user point of view.",7
0.0,};,"Public aliases are for the benefit of an API's user, and should be clearly documented.",7
0.0,};,DataPoint may change from // Client code should treat it as an opaque pointer.,7
0.0,};,"using TimeSeries = std::unordered_set<DataPoint, std::hash<Data } // namespace mynamespace These aliases don't document intended use, and half of them aren't meant for client use: namespace mynamespace { // Bad: none of these say how they should be used. using DataPoint = ::foo::Bar*; using ::std::unordered_set; // Bad: just for local convenience using ::std::hash;      // Bad: just for local convenience typedef unordered_set<DataPoint, hash<DataPoint>, DataPointComp } // namespace mynamespace However, local convenience aliases are fine in function definitions, private sections of classes, explicitly marked internal namespaces, and in .cc files: // In a .cc file using ::foo::Bar; If not conditional on an enumerated value, switch statements should always have a default case (in the case of an enumerated value, the compiler will warn you if any values are not handled). If the default case should never execute, treat this as an error.",7
0.0,};,[[fallthrough]]; should be placed at a point of execution where a fall-through to the next case label occurs.,7
0.0,};,"Generally speaking, descriptiveness should be proportional to the name's scope of visibility.",7
0.0,};,"Template parameters should follow the naming style for their category: type template parameters should follow the rules for type names, and non-type template parameters should follow the rules for variable names. Filenames should be all lowercase and can include underscores (_) or dashes (-).",7
0.0,};,C++ files should end in .cc and header files should end in .h. Files that rely on being textually included at specific points should end in .inc (see also the section on self- contained headers).,7
0.0,};,Type names should start with a capital letter and have a capital letter for each new word.,7
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Duration for details) should be named this way.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Regular functions have mixed case; accessors and mutators may be named like variables.Constant Names Function Names 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 56/77Ordinarily, functions should start with a capital letter and have a capital letter for each new word.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",The name of a top-level namespace should usually be the name of the project or team whose code is contained in that namespace. The code in that namespace should usually be in a directory whose basename matches the namespace name (or in subdirectories thereof).,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Enumerators (for both scoped and unscoped enums) should be named like constants, not like macros.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",New code should use constant-style naming.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Please see the description of macros; in general macros should not be used. However, if they are absolutely needed, then they should be named with all capitals and underscores, and with a project-specific prefix.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",The following rules describe what you should comment and where.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Legal Notice and Author Line Every file should contain license boilerplate.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","New files should usually not contain copyright notice or author line. File Contents If a .h declares multiple abstractions, the file-level comment should broadly describe the contents of the file, and how the abstractions are related.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Every non-obvious class or struct declaration should have an accompanying comment that describes what it is for and how it should be used.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","// Example: //  std::unique_ptr<GargantuanTableIterator> iter = table->Ne //  for (iter->Seek(""foo""); !iter->done(); iter->Next()) { //   process(iter->key(), iter->value()); //  } class GargantuanTableIterator {  ... }; The class comment should provide the reader with enough information to know how and when to use the class, as well as any additional considerations necessary to correctly use the class.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","When sufficiently separated (e.g., .h and .cc files), comments describing the use of the class should go together with its interface definition; comments about the classFile Comments Class Comments 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 59/77operation and implementation should accompany the implementation of the class's methods.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Function Declarations Almost every function declaration should have comments immediately preceding it that describe what the function does and how to use it.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Function comments should be written with an implied subject of This function and should start with the verb phrase; for example, ""Opens the file"", rather than ""Open the file"".",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Instead, that should be left to comments in the function definition.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","It is quite common for destructors not to have a header comment.Function Comments 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 60/77Function Definitions If there is anything tricky about how a function does its job, the function definition should have an explanatory comment.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Note you should not just repeat the comments given with the function declaration, in the .h file or wherever. It's okay to recapitulate briefly what the function does, but the focus of the comments should be on how it does it. In general the actual name of the variable should be descriptive enough to give a good idea of what the variable is used for.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","int num_total_entries_; Global V ariables All global variables should have a comment describing what they are, what they are used for, and (if unclear) why they need to be global. For example: // The total number of test cases that we run through in this r const int kNumTestCases = 6; In your implementation you should have comments in tricky, non-obvious, interesting, or important parts of your code.Variable Comments Implementation Comments 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 61/77Explanatory Comments Tricky or complicated code blocks should have comments before them. When the meaning of a function argument is nonobvious, consider one of the following remedies: If the argument is a literal constant, and the same constant is used in multiple function calls in a way that tacitly assumes they're the same, you should use a named constant to make that constraint explicit, and to guarantee that it holds.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Comments should be as readable as narrative text, with proper capitalization and punctuation.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style. Although it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","TODOs should include the string TODO in all caps, followed by the name, e-mail address, bug ID, or other identifier of the person or issue with the best context about the problem referenced by the TODO.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Each line of text in your code should be at most 80 characters long.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Except for test code, such literals should appear at namespace scope near the top of a file.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","a header guard a using-declaration Non-ASCII characters should be rare, and must use UTF-8 formatting. You shouldn't hard-code user-facing text in source, even English, so use of non-ASCII characters should be rare.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","In such cases, you should use UTF-8, since that is an encoding understood by most tools able to handle more than just ASCII.Line Length Non-ASCII Characters 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 64/77Hex encoding is also OK, and encouraged where it enhances readability — for example, ""\xEF\xBB\xBF"", or, even more simply, ""\uFEFF"", is the Unicode zero- width no-break space character, which would be invisible if included in the source as straight UTF-8.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","You shouldn't use char16_t and char32_t character types, since they're for non- UTF-8 text. For similar reasons you also shouldn't use wchar_t (unless you're writing code that interacts with the Windows API, which uses wchar_t extensively).",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",You should set your editor to emit spaces when you hit the tab key.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",There should be a space between the close parenthesis and the open curly brace. All parameters should be aligned if possible.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Unused parameters that are obvious from context may be omitted: class Foo { public:  Foo(const Foo&) = delete;  Foo& operator=(const Foo&) = delete; }; Unused parameters that might not be obvious should comment out the variable name in the function definition: class Shape { public:  virtual void Rotate(double radians) = 0; }; class Circle : public Shape { public:  void Rotate(double radians) override; }; void Circle::Rotate(double /*radians*/) {} // Bad - if someone wants to implement later, it's not clear wh // variable means.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","int x = 0; auto x_plus_n = [&x](int n) -> int { return x + n; } Short lambdas may be written inline as function arguments.Lambda Expressions 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 66/77absl::flat_hash_set<int> to_remove = {7, 8, 9}; std::vector<int> digits = {3, 9, 1, 8, 4, 7, 1}; digits.erase(std::remove_if(digits.begin(), digits.end(), [&to_        return to_remove.contains(i);       }),       digits.end()); Floating-point literals should always have a radix point, with digits on both sides, even if they use exponential notation.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Function calls have the following format: bool result = DoSomething(argument1, argument2, argument3); If the arguments do not all fit on one line, they should be broken up onto multiple lines, with each subsequent line aligned with the first argument.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",The decision should be specific to the argument which is made more readable rather than a general policy.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",For these statements: The components of the statement should be separated by single spaces (not line breaks).,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","If you do include curly braces, they should be placed as shown below. switch (var) {  case 0: { // 2 space indent   Foo();  // 4 space indent   break;  }  default: {   Bar();  } } Empty loop bodies should use either an empty pair of braces or continue with no braces, rather than a single semicolon.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",char* c; const std::string& str; int* GetPointer(); std::vector<char*> // Note no space between '*' and '>' You should do this consistently within a single file.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Also note that you should always use the punctuation operators, such as && and ~, rather than the word operators, such as and and compl.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","The hash mark that starts a preprocessor directive should always be at the beginning of the line. Even when preprocessor directives are within the body of indented code, the directives should start at the beginning of the line.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","The ""#if"" should be at beg   DropEverything();   #endif        // Wrong!",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","explicit MyClass(int var);  ~MyClass() {}  void SomeFunction();  void SomeFunctionThatDoesNothing() {  }  void set_some_var(int var) { some_var_ = var; }Preprocessor Directives Class Format 8/8/23, 11:17 AM Google C++ Style Guide https://google.github.io/styleguide/cppguide.html 73/77 int some_var() const { return some_var_; } private:  bool SomeInternalFunction();  int some_var_;  int some_other_var_; }; Things to note: Any base class name should be on the same line as the subclass name, subject to the 80-column limit. The public:, protected:, and private: keywords should be indented one space. Except for the first instance, these keywords should be preceded by a blank line.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","The public section should be first, followed by the protected and finally the private section.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Indented when it should not be.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",void f(bool b) { // Open braces should always have a space bef  ... int i = 0; // Semicolons usually have no space before them.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",Parentheses should have // internal padding.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",The path in the include guards should be relative to the top of your project tree.,3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage","Although you should not use exceptions in your own code, they are used extensively in the ATL and some STLs, including the one that comes with Visual C++. When using the ATL, you should define _ATL_NO_EXCEPTIONS to disable exceptions. You should investigate whether you can also disable exceptions in your STL, but if not, it is OK to turn on exceptions in the compiler.",3
8.0.0,"All such variables with static storage duration (i.e., statics and globals, see Storage",You should still not write exception handling code yourself.),3
